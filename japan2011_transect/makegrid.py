
from __future__ import print_function

from pylab import *
from scipy.interpolate import interp1d
from clawpack.geoclaw import topotools


def makegrid():
    grav = 9.81

    mx = 10000

    x0_shore = 0.         # initial shoreline
    radius = 300e3        # radius from impact

    x0 = -radius
    x1 = x0_shore + 4e3

    # interpolate from transect:

    # Read in transect data.
    # The file 'etopo1_transect.txt' was generated by maketopo.py

    xe,Be = loadtxt('etopo1_transect.txt', comments='#', unpack=True)
    etopof = interp1d(xe,Be)

    je_shore = find(Be>0).min()
    xe_shore = xe[je_shore]

    def interp_topo(r):
        z = 100*ones(r.shape)
        for j,rval in enumerate(r):
            xlong = xe_shore + rval / (111e3*cos(44.2*pi/180.))
            z[j] = etopof(xlong)
        return z


    hmin = 50. 
    cmin = sqrt(grav*hmin)

    def c(x):
        z = interp_topo(x)
        h = where(-z > hmin, -z, hmin)
        c = sqrt(grav*h)
        return c

    xunif = linspace(x0, x1, 2*mx)
    cunif = c(xunif)
    csum = cumsum(1./cunif)
    csum = csum - csum[0]

    csum = csum / csum[-1]
    cinv = interp1d(csum, xunif)

    xc = linspace(0, 1, mx+1)   # computational grid
    xp = cinv(xc)
    #z = shelf1(xp)
    z = interp_topo(xp)


    fname = 'grid.data'
    f = open(fname,'w')
    f.write('%10i \n' % mx)
    for i in range(mx+1):
        f.write('%15.4f %15.4f\n' % (xp[i],z[i]))
    f.close()
    print("Created %s, containing cell edges" % fname)

    if 0:
        figure(1, figsize=(8,4))
        clf()
        fill_between(xp,where(z<0,z,nan),0.,color=[.5,.5,1])
        plot(xp,z,'g')
        xlim(x0,x1)
        ylim(z.min()-500,500)
        title('Transect at latitude 44.2')
        fname = 'topo.png'
        savefig(fname)
        print("Created ",fname)

if __name__=='__main__':
    makegrid()
